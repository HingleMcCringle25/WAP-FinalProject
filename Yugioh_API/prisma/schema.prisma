// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Define the 'product' model
model Product {
  product_id     Int          @id @default(autoincrement())
  name           String
  description    String
  cost           Float
  cost           Float
  image_filename String
  rarity         String
  condition      String
  serialNumber   Int
  edition        String
  stockQuantity  Int
  purchaseItems  PurchaseItem[] // Reverse relation to PurchaseItem
  purchaseItems  PurchaseItem[] // Reverse relation to PurchaseItem
}

// Define the 'customer' model
model Customer {
  customer_id  Int       @id @default(autoincrement())
  email        String    @unique
  customer_id  Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  first_name   String
  last_name    String
  username     String    @unique
  purchases    Purchase[] // Reverse relation to Purchase
}


model Purchase {
  purchase_id   Int         @id @default(autoincrement())
  customer_id   Int
  street        String
  city          String
  province      String
  country       String
  postal_code   String
  credit_card   String
  credit_expire DateTime
  credit_cvv    String
  invoice_amt   Float
  invoice_tax   Float
  invoice_total Float
  order_date    DateTime
  customer      Customer   @relation(fields: [customer_id], references: [customer_id])
  purchaseItems PurchaseItem[]
}

model PurchaseItem {
  purchase_id Int
  product_id  Int
  quantity    Int
  purchase    Purchase @relation(fields: [purchase_id], references: [purchase_id])
  product     Product  @relation(fields: [product_id], references: [product_id])

  @@id([purchase_id, product_id]) // Composite primary key
}